    
TODO:
1. use bam.idx

Workflow 1:
1. Usage: gtools asm <ref.fa> <in.gtf> <SAMPLE1.REP1,REP2,REP3 ...;SAMPLE2.REP1,REP2,REP3 ...>
            ":" separates samples, "," separates replicates
   splice-junction considered: (K: known, n: novel, N: novel-com)
       K:            only known
       K + N:        known and novel-combination of known sites and known junction
       K + n(N):     known and novel splice-junction of known splice-site
       K + n(N) + l: known and novel splice-junction of known splcie-site, only output ASM/ASE with novel splice-junction

2. Load ref.fa, ref.gtf

3. Build GTF-SG
    // update node & site
    1.  update_node(exon)
        update_site(exon.start/exon.end)
    // init 
    2. alloc for node & site
        init_node/site({id, malloc(node[next/pre]/site[exon_id]}) 
    3. update edge
        GTF(don, acc) ==> (node_don_id, node_acc_id), (site_don_id, site_acc_id)
        update_edge(site_don_id, site_acc_id)       // EDGE DONE
        update_node_site(node_don_id, site_don_id) (node_acc_id, site_acc_id)
        update_node_pre/next(node_don_id, node_acc_id)  // NODE DONE
        update_site_exon(site_don/acc_id, node_don/acc_id)  // SITE DONE

4. Load short-read junction info from BAM/SJ file

5. Build SR-SJ-SG
    for (each rep)
        read_BAM/SJ_file
            3. SR-SJ-SG
                // update node & site
                1. sj(don, acc) ==> GTF_don/acc_site_id // known sj (AND novel sj)
                    map[site[GTF_don/acc_id].exon[]] = 1
                    if (Node.map & Node.map == 1) {
                        update_node(Node) {e}
                        // update site
                        SJ_SG_update_site(e.start, e.end)
                    }
                // alloc for node&site
                2. init_node/site {id, malloc(node[next/pre]/site[exon_id]}
                3. update edge, node.next/pre, site.exon_id
                    3.0 sj(don, acc) ==> SJ_SG_site_id 
                        if (hit == 0) continue;
                    3.1 SJ_SG_update_edge(site_id, cov)                   // EDGE DONE

                    3.2 update_node_next/pre
                    sj(don, acc) ==> GTF_don/acc_site_id
                    for (site[GTF_don/acc_site_id].exon[]) {
                        if (map == 1) {
                            (exon) ==> node_id // sch(sr_sg)
                            if (hit == 0) continue;
                            update_site_exon(site_id, node_id)      // SITE DONE
                        }
                    }
                    for (don_site_id.exon[]) {
                        for (acc_site_id.exon[]) {
                            if (no_novel_sj) {
                                if (GTF_node[don.exon[]].next == GTF_node[acc.exon[]]) {
                                    update_node_next(don.exon[], acc.exon[])
                                    update_node_site(don.exon[], don_site_id) (acc.exon[], acc_site_id)
                                }
                            } else {
                                update_node_next(don.exon[], acc.exon[])    // NODE DONE
                                update_node_site(don.exon[], don_site_id) (acc.exon[], acc_site_id)
                            }
                        }
                    }

6. output multi-sample/replicates' ASE into one-file
    merge sort all the ASE
        init index for each rep
        while (we have ASE left) {
            min_ase = get_min(all rep) {
            }
            for (all rep) {
                if (ase == min_ase) {
                    output(ase)
                    update_rep_index()
                } else {
                    output(0)
                }
            }
        }

Workflow 2:
1. Usage: gtools asm <ref.fa> <in.gtf> <SAMPLE1.REP1,REP2,REP3 ...;SAMPLE2.REP1,REP2,REP3 ...>
            ":" separates samples, "," separates replicates
   splice-junction considered: (K: known, n: novel, N: novel-com)
       K:            only known
       K + N:        known and novel-combination of known sites and known junction
       K + n(N):     known and novel splice-junction of known splice-site
       K + n(N) + l: known and novel splice-junction of known splcie-site, only output ASM/ASE with novel splice-junction

2. Load ref.fa(Optional), ref.gtf
    use ref.fa to classify intron-motif

3. Build GTF-SG
    // update node & site
    1.  update_node(exon)
        update_site(exon.start/exon.end)
    // init 
    2. alloc for node & site
        init_node/site({id, malloc(node[next/pre]/site[exon_id]}) 
    3. update edge
        GTF(don, acc) ==> (node_don_id, node_acc_id), (site_don_id, site_acc_id)
        update_edge(site_don_id, site_acc_id)       // EDGE DONE
        update_node_site(node_don_id, site_don_id) (node_acc_id, site_acc_id)
        update_node_pre/next(node_don_id, node_acc_id)  // NODE DONE
        update_site_exon(site_don/acc_id, node_don/acc_id)  // SITE DONE

4. Load short-read junction from BAM file
    for (each sam/rep)
        load SJ into sj_group
        write read and SJ into disk

// XXX NO multi-sample/replicate
5. Update weight of GTF-SG edges
    (Optional) Add new edges to GTF-SG
    (Optional) Add new nodes to GTF-SG // XXX
    // XXX for (each rep)
        for each sj
           if (sj is annotated)
             update edge weight
           else if (novel is allowed)
             add new edge
             update edge weight

6. SG => ASM
7. ASM => ASE

Workflow 3: // best workflow
1. Build GTF-SG
2. for each read-BAM-record
    0-sj => update node count
    1-sj => update weight/ add edge/ nothing(invalid)
    m-sj => if (sj is invalid) 
                discard the whole read-record   // XXX
             OR discard the sj                  // => workflow 4
3. SG => ASM
4. ASM => ASE

Workflow 4:
1. Build GTF-SG
2. Load sj into sj_group from BAM file
3. for each sj
       update weight/ add edge/ nothing(invalid)
4. SG => ASM
5. ASM => ASE

Workflow 5:
1. Build GTF-SG
2. Generate junction-included "alignment-details" AD and from BAM file
3. Update exon-body count for each SG-node
4. for each sj
    update weight / add edge / nothing(invalid sj)
5. SG => ASM
6. ASM => ASE (*optional)
7. use "alignment-details" to update edge weight for ASM(ASE)
    7.1 update ASM
        1. ASM2ISO: generate all candidate isoforms
        2. fill the "iso X read" matrix
    7.2 update ASE
        1. ASE2ISO: generate inclusive and exclusive isoforms
        2. fill the "in/ex X read" matrix

Workflow 6: ( for multi-group and -replicate)
1. Build GTF-SG
2. Generate junction-group for each group-reps
    a. sjs from all group-reps are collapsed together
    b. filter sj 
        i.  all normal filter criteria
        ii. max count of each group-rep < T
3. Update exon-body count for each SG-node
    a. for each sj
        update weight / add edge / nothing(invalid sj)
    b. remove weak edge
        max weight < T
4. SG => ASM
5. ASM => ASE (*optional)
6. generate 
7. use "alignment-details" to update edge weight for ASM(ASE)
    7.1 update ASM
        1. ASM2ISO: generate all candidate isoforms
        2. fill the "iso X read" matrix
    7.2 update ASE
        1. ASE2ISO: generate inclusive and exclusive isoforms
        2. fill the "in/ex X read" matrix

Workflow 6: (for multi-group and -replicate, use mutli-threads)
1. load chr_name --- 1 thread
2. build GTF-SG  --- 1 thread
3. for m-thread: (total m group-reps):
    Generate junction-group for each group-reps
    filter sj:
        a. all normal filter criteria
4. merge sj
    filter sj:
        b. max count of sj < T
5. Update splice-graph
    a. add new edge for novel sj
    b. nothing for invalid sj
6. SG => ASM
7. for m-thread: (total m group-reps):
    a. generate alignment-detail for each group-reps
    b. check if support isoform
    c. generate matrix
